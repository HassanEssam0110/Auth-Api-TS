{
	"info": {
		"_postman_id": "be175c17-8eca-4032-b8d4-b9b35a43022b",
		"name": "Node with TS API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24851140",
		"_collection_link": "https://crimson-desert-446143.postman.co/workspace/572b3c87-781f-4db3-8e72-fb0adf25a725/collection/24851140-be175c17-8eca-4032-b8d4-b9b35a43022b?action=share&source=collection_link&creator=24851140"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"JWT\", \"Bearer \" + pm.response.json().data.token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"Hassan Essam\",\r\n    \"email\":\"test2@mail.com\",\r\n    \"password\":\"Asd@@123\",\r\n    \"repeat_password\":\"Asd@@123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:5000/api/v1/auth/register",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						},
						"description": "## Register User\n\nThis endpoint allows new users to register by providing their details. Upon successful registration, the user will receive a confirmation response.\n\n### Request\n\n**Method:** POST  \n**Endpoint:** `/api/v1/auth/register`\n\n#### Request Body\n\nThe request body must be in JSON format and include the following parameters:\n\n- **name** (string): The full name of the user.\n    \n- **email** (string): The email address of the user. It must be unique and valid.\n    \n- **password** (string): The password chosen by the user. It should meet security requirements (e.g., minimum length, complexity).\n    \n- **repeat_password** (string): A confirmation of the password to ensure accuracy.\n    \n\n### Expected Response\n\nOn a successful registration, the API will return a response indicating the success of the operation. The response may include a confirmation message and the user's details (excluding sensitive information).\n\n### Notes\n\n- Ensure that the email provided is not already in use by another account.\n    \n- Passwords should be handled securely and must meet the application's security standards.\n    \n- In case of errors (e.g., missing parameters, invalid email format), the API will return appropriate error messages to guide the user.\n    \n\nMake sure to validate the input data before sending the request to avoid unnecessary errors."
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"JWT\", \"Bearer \" + pm.response.json().data.token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"test2@mail.com\",\r\n    \"password\":\"Asd@@123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:5000/api/v1/auth/login",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						},
						"description": "## Login Endpoint\n\nThis endpoint is used to authenticate users by logging them into the application. It accepts user credentials and, upon successful authentication, returns a response containing user information and a session token.\n\n### Request\n\n- **Method**: POST\n    \n- **Endpoint**: `/api/v1/auth/login`\n    \n\n#### Request Body\n\nThe request body must be in JSON format and should include the following parameters:\n\n- `email` (string): The email address of the user attempting to log in.\n    \n- `password` (string): The password associated with the user's account.\n    \n\n**Example Request Body:**\n\n``` json\n{\n  \"email\": \"test2@mail.com\",\n  \"password\": \"Asd@@123\"\n}\n\n ```\n\n### Response\n\nUpon a successful login, the response will typically include:\n\n- `token` (string): A session token that can be used for subsequent authenticated requests.\n    \n- `user` (object): An object containing user details such as user ID, name, and email.\n    \n\n**Example Response Structure:**\n\n``` json\n{\n  \"token\": \"your_access_token_here\",\n  \"user\": {\n    \"id\": \"user_id_here\",\n    \"name\": \"User Name\",\n    \"email\": \"test2@mail.com\"\n  }\n}\n\n ```\n\n### Notes\n\n- Ensure that the email and password are valid and correctly formatted.\n    \n- If the authentication fails, an appropriate error message will be returned."
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Get My Profile",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "127.0.0.1:5000/api/v1/users/me",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"users",
								"me"
							]
						},
						"description": "### Get Authenticated User Data\n\nThis endpoint retrieves the details of the currently authenticated user. It is a GET request that does not require any request body.\n\n### Request Format\n\n- **Method**: GET\n    \n- **URL**: `127.0.0.1:5000/api/v1/users/me`\n    \n- **Request Body**: None\n    \n\n### Response Structure\n\nOn a successful request, the server responds with a status code of `200` and a JSON object containing the user details. The response structure is as follows:\n\n- **status**: A string indicating the status of the response.\n    \n- **data**: An object containing the user's information:\n    \n    - **_id**: The unique identifier for the user.\n        \n    - **name**: The name of the user.\n        \n    - **email**: The email address of the user.\n        \n    - **slug**: A URL-friendly version of the user's name.\n        \n    - **role**: The role assigned to the user (e.g., admin, user).\n        \n    - **createdAt**: Timestamp indicating when the user was created.\n        \n    - **updatedAt**: Timestamp indicating when the user was last updated.\n        \n    - **__v**: Version key for the document.\n        \n\n### Example Response\n\n``` json\n{\n  \"status\": \"\",\n  \"data\": {\n    \"_id\": \"\",\n    \"name\": \"\",\n    \"email\": \"\",\n    \"slug\": \"\",\n    \"role\": \"\",\n    \"createdAt\": \"\",\n    \"updatedAt\": \"\",\n    \"__v\": 0\n  }\n}\n\n ```\n\nThis endpoint is useful for applications that need to display user-specific information after authentication."
					},
					"response": []
				},
				{
					"name": "Update My Data",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "authorization",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"name\":\"new update\",\r\n   \"email\": \"test2@mail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:5000/api/v1/users/me",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"users",
								"me"
							]
						},
						"description": "### Update User Information\n\nThis endpoint allows users to update their personal information. The request modifies the user data associated with the authenticated user.\n\n#### Request\n\n- **Method**: PATCH\n    \n- **URL**: `/api/v1/users/me`\n    \n- **Content-Type**: application/json\n    \n\n#### Request Body Parameters\n\n| Key | Type | Description |\n| --- | --- | --- |\n| name | string | The new name of the user. |\n| email | string | The new email address of the user. |\n\n#### Response\n\nUpon a successful update, the server responds with a status code of `200` and returns a JSON object containing the updated user information.\n\n##### Response Structure\n\n- **status**: A string indicating the status of the request.\n    \n- **data**: An object containing the updated user details:\n    \n    - **_id**: The unique identifier for the user.\n        \n    - **name**: The updated name of the user.\n        \n    - **email**: The updated email address of the user.\n        \n    - **slug**: A URL-friendly version of the user's name.\n        \n    - **role**: The role assigned to the user.\n        \n    - **createdAt**: The timestamp when the user was created.\n        \n    - **updatedAt**: The timestamp when the user was last updated.\n        \n    - **__v**: The version key for the user document.\n        \n\nThis endpoint is essential for users to keep their information current and relevant."
					},
					"response": []
				},
				{
					"name": "Update My Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.collectionVariables.set(\"JWT\", \"Bearer \" + pm.response.json().data.token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "authorization",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"current_password\":\"Asd@@123\",\r\n\"password\":\"Asd@@456\",\r\n\"repeat_password\":\"Asd@@456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:5000/api/v1/users/me/password",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"users",
								"me",
								"password"
							]
						},
						"description": "### Update User Password\n\nThis endpoint allows the authenticated user to update their password. It requires the current password as well as the new password and a confirmation of the new password.\n\n#### Request\n\n- **Method:** PATCH\n    \n- **Endpoint:** `/api/v1/users/me/password`\n    \n\n#### Request Body\n\nThe request body must be in JSON format and should include the following parameters:\n\n- `current_password` (string): The user's current password.\n    \n- `password` (string): The new password that the user wishes to set.\n    \n- `repeat_password` (string): A confirmation of the new password. This should match the `password` field.\n    \n\n#### Example Request Body\n\n``` json\n{\n  \"current_password\": \"Asd@@123\",\n  \"password\": \"Asd@@456\",\n  \"repeat_password\": \"Asd@@456\"\n}\n\n ```\n\n#### Response\n\nOn a successful password update, the server responds with a status code of `200` and a JSON object containing the updated user information and an authentication token.\n\n- **Status Code:** 200\n    \n- **Content-Type:** application/json\n    \n\n#### Response Structure\n\n``` json\n{\n  \"status\": \"\",\n  \"data\": {\n    \"user\": {\n      \"_id\": \"\",\n      \"name\": \"\",\n      \"email\": \"\",\n      \"slug\": \"\",\n      \"role\": \"\",\n      \"createdAt\": \"\",\n      \"updatedAt\": \"\",\n      \"__v\": 0,\n      \"passwordChangedAt\": \"\"\n    },\n    \"token\": \"\"\n  }\n}\n\n ```\n\n- `status`: A string indicating the status of the request.\n    \n- `data`: An object containing:\n    \n    - `user`: An object with user details including:\n        \n        - `_id`: The unique identifier for the user.\n            \n        - `name`: The user's name.\n            \n        - `email`: The user's email address.\n            \n        - `slug`: A URL-friendly version of the user's name.\n            \n        - `role`: The user's role within the system.\n            \n        - `createdAt`: The timestamp when the user was created.\n            \n        - `updatedAt`: The timestamp when the user was last updated.\n            \n        - `__v`: The version key for the user document.\n            \n        - `passwordChangedAt`: The timestamp when the password was last changed.\n            \n    - `token`: An authentication token for the user.\n        \n\nEnsure that the new password meets the required security criteria before submitting the request."
					},
					"response": []
				},
				{
					"name": "Soft Delete My Acount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "authorization",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "127.0.0.1:5000/api/v1/users/me",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"users",
								"me"
							]
						},
						"description": "## Soft DELETE User\n\nThis endpoint is used to delete the current user's account from the system.\n\n### Request Parameters\n\n- **No request parameters are required for this endpoint.** The request is sent to the URL with the appropriate HTTP method.\n    \n\n### Expected Response\n\n- **Status Code:** `204 No Content`  \n    This indicates that the request was successful and the user's account has been deleted. No additional content is returned in the response body.\n    \n\n### Notes\n\n- Ensure that the user is authenticated before making this request, as it requires valid credentials to identify the user account to be deleted.\n    \n- This action is irreversible; once the account is deleted, all associated data will be lost."
					},
					"response": []
				}
			]
		},
		{
			"name": "Items",
			"item": [
				{
					"name": "Get Items",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "127.0.0.1:5000/api/v1/items",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"items"
							]
						},
						"description": "### API Endpoint: Get Items\n\nThis endpoint retrieves a list of items from the server. It is a simple HTTP GET request that does not require any request body.\n\n#### Request\n\n- **Method**: GET\n    \n- **URL**: `http://127.0.0.1:5000/api/v1/items`\n    \n\n#### Response\n\nOn a successful request (HTTP Status 200), the server responds with a JSON object containing the following structure:\n\n- **status**: A string indicating the status of the response.\n    \n- **data**: An array of item objects, where each item contains:\n    \n    - **_id**: The unique identifier for the item.\n        \n    - **name**: The name of the item.\n        \n    - **description**: A brief description of the item.\n        \n    - **quantity**: The available quantity of the item.\n        \n    - **slug**: A URL-friendly string representation of the item name.\n        \n    - **addedBy**: An object containing information about the user who added the item, including:\n        \n        - **_id**: The unique identifier for the user.\n            \n        - **name**: The name of the user.\n            \n        - **email**: The email address of the user.\n            \n    - **createdAt**: The timestamp when the item was created.\n        \n    - **updatedAt**: The timestamp when the item was last updated.\n        \n    - **__v**: The version key for the item.\n        \n\nThis endpoint is useful for fetching all available items along with their details and the user who added them."
					},
					"response": []
				},
				{
					"name": "Get Item By Id",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "127.0.0.1:5000/api/v1/items/6868f1fffd05ffc864e24c4c",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"items",
								"6868f1fffd05ffc864e24c4c"
							]
						},
						"description": "## API Endpoint: Retrieve Item Details\n\nThis endpoint allows you to retrieve details of a specific item using its unique identifier. The item ID is provided as part of the URL path.\n\n### Request\n\n- **Method:** GET\n    \n- **URL:** `http://127.0.0.1:5000/api/v1/items/{itemId}`\n    \n- **Path Parameter:**\n    \n    - `itemId` (string): The unique identifier of the item you wish to retrieve.\n        \n\n### Response\n\nUpon a successful request, the server responds with a status code of `200` and a JSON object containing the details of the requested item.\n\n#### Response Structure:\n\n``` json\n{\n  \"status\": \"\",\n  \"data\": {\n    \"_id\": \"\",                // Unique identifier of the item\n    \"name\": \"\",               // Name of the item\n    \"description\": \"\",        // Description of the item\n    \"quantity\": 0,            // Available quantity of the item\n    \"slug\": \"\",               // URL-friendly identifier for the item\n    \"addedBy\": {\n      \"_id\": \"\",              // Unique identifier of the user who added the item\n      \"name\": \"\",             // Name of the user who added the item\n      \"email\": \"\"             // Email of the user who added the item\n    },\n    \"createdAt\": \"\",         // Timestamp when the item was created\n    \"updatedAt\": \"\",         // Timestamp when the item was last updated\n    \"__v\": 0                  // Version key for the item\n  }\n}\n\n ```\n\n### Notes\n\n- The `status` field in the response indicates the success or failure of the request.\n    \n- The `data` object contains the details of the item, including metadata about its creator and timestamps for tracking."
					},
					"response": []
				},
				{
					"name": "Create Item",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authorization",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"New Item S256\",\r\n    \"description\":\"new smart phone.\",\r\n    \"quantity\":20\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:5000/api/v1/items",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"items"
							]
						},
						"description": "### Endpoint\n\n**POST** `/api/v1/items`\n\n### Overview\n\nThis endpoint allows users to create a new item in the inventory. By sending a POST request with the required item details in the request body, users can add items such as products or goods to the system.\n\n### Request Body Parameters\n\nThe request body must be in JSON format and include the following parameters:\n\n- **name** (string): The name of the item to be added.\n    \n- **description** (string): A brief description of the item.\n    \n- **quantity** (integer): The quantity of the item being added to the inventory.\n    \n\n### Response\n\nUpon successful creation of the item, the server responds with a `201 Created` status. The response body will include a JSON object containing the following fields:\n\n- **status**: A status message indicating the result of the operation.\n    \n- **data**: An object containing the details of the created item, including:\n    \n    - **name**: The name of the item.\n        \n    - **description**: The description of the item.\n        \n    - **quantity**: The quantity of the item.\n        \n    - **slug**: A URL-friendly version of the item's name.\n        \n    - **addedBy**: The identifier of the user who added the item.\n        \n    - **_id**: The unique identifier for the item.\n        \n    - **createdAt**: The timestamp when the item was created.\n        \n    - **updatedAt**: The timestamp when the item was last updated.\n        \n    - **__v**: The version key for the item.\n        \n\nThis endpoint is essential for managing inventory by allowing the addition of new items efficiently."
					},
					"response": []
				},
				{
					"name": "Update Item",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "authorization",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"update name 156\",\r\n    \"description\":\"new smart..\",\r\n    \"quantity\":15\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:5000/api/v1/items/6868f1fffd05ffc864e24c4c",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"items",
								"6868f1fffd05ffc864e24c4c"
							]
						},
						"description": "## Update Item\n\nThis endpoint allows you to update an existing item in the inventory. By sending a PUT request to the specified URL, you can modify the details of the item identified by its unique ID.\n\n### Request\n\n- **Method**: PUT\n    \n- **URL**: `127.0.0.1:5000/api/v1/items/{id}`\n    \n\n#### Path Parameters\n\n- `id` (string): The unique identifier of the item you wish to update.\n    \n\n#### Request Body\n\nThe request body must be in JSON format and include the following fields:\n\n- `name` (string): The new name of the item.\n    \n- `description` (string): A brief description of the item.\n    \n- `quantity` (integer): The updated quantity of the item.\n    \n\n**Example Request Body**:\n\n``` json\n{\n  \"name\": \"update name 156\",\n  \"description\": \"new smart..\",\n  \"quantity\": 15\n}\n\n ```\n\n### Response\n\nOn a successful update, the server responds with a status code of `200` and a JSON object containing the following structure:\n\n- `status` (string): The status of the operation (typically empty in this case).\n    \n- `data` (object): An object containing the updated item details:\n    \n    - `_id` (string): The unique identifier of the item.\n        \n    - `name` (string): The updated name of the item.\n        \n    - `description` (string): The updated description of the item.\n        \n    - `quantity` (integer): The updated quantity of the item.\n        \n    - `slug` (string): A URL-friendly version of the item's name.\n        \n    - `addedBy` (string): The identifier of the user who added the item.\n        \n    - `createdAt` (string): The timestamp when the item was created.\n        \n    - `updatedAt` (string): The timestamp when the item was last updated.\n        \n    - `__v` (integer): The version key for the item.\n        \n\n**Example Response**:\n\n``` json\n{\n  \"status\": \"\",\n  \"data\": {\n    \"_id\": \"\",\n    \"name\": \"\",\n    \"description\": \"\",\n    \"quantity\": 0,\n    \"slug\": \"\",\n    \"addedBy\": \"\",\n    \"createdAt\": \"\",\n    \"updatedAt\": \"\",\n    \"__v\": 0\n  }\n}\n\n ```\n\nThis endpoint is essential for maintaining accurate and up-to-date information about items in your inventory."
					},
					"response": []
				},
				{
					"name": "Delete Item",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "authorization",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "127.0.0.1:5000/api/v1/items/6868f1fffd05ffc864e24c4c",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"items",
								"6868f1fffd05ffc864e24c4c"
							]
						},
						"description": "## DELETE /api/v1/items/{item_id}\n\nThis endpoint is used to delete a specific item from the inventory based on the provided `item_id`. The request is made to the server to remove the item permanently.\n\n### Request Parameters\n\n- **item_id** (path parameter): The unique identifier of the item to be deleted. This should be a valid ID that corresponds to an existing item in the database.\n    \n\n### Response\n\nUpon a successful deletion, the server will respond with:\n\n- **Status Code**: `204 No Content` - This indicates that the request was successful and that there is no content to send back in the response body.\n    \n- **Content-Type**: `text/xml` - Although the response does not contain any content, the server indicates the content type as XML.\n    \n\n### Notes\n\n- There is no request body required for this DELETE operation.\n    \n- A successful deletion will not return any additional information or data in the response."
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin - Users",
			"item": [
				{
					"name": "Get Users",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "127.0.0.1:5000/api/v1/admin/users",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"admin",
								"users"
							]
						},
						"description": "## API Endpoint: Get Users\n\n### Request Method\n\n`GET`\n\n### Endpoint\n\n`/api/v1/admin/users`\n\n### Description\n\nThis endpoint retrieves a list of users from the admin section of the application. It does not require any query parameters or request body.\n\n### Expected Response\n\nUpon a successful request, the server will respond with a status code of `200` and a JSON object containing the following structure:\n\n- **status**: A string indicating the status of the request.\n    \n- **data**: An array of user objects, each containing:\n    \n    - **_id**: The unique identifier for the user.\n        \n    - **name**: The name of the user.\n        \n    - **email**: The email address of the user.\n        \n    - **slug**: A URL-friendly version of the user's name.\n        \n    - **role**: The role assigned to the user (e.g., admin, user).\n        \n    - **createdAt**: The timestamp when the user was created.\n        \n    - **updatedAt**: The timestamp when the user was last updated.\n        \n    - **__v**: The version key for the user document.\n        \n\n### Example Response\n\n``` json\n{\n  \"status\": \"\",\n  \"data\": [\n    {\n      \"_id\": \"\",\n      \"name\": \"\",\n      \"email\": \"\",\n      \"slug\": \"\",\n      \"role\": \"\",\n      \"createdAt\": \"\",\n      \"updatedAt\": \"\",\n      \"__v\": 0\n    }\n  ]\n}\n\n ```\n\nThis response structure allows clients to easily parse and utilize the user data retrieved from the API."
					},
					"response": []
				},
				{
					"name": "Get User",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "127.0.0.1:5000/api/v1/admin/users/686816521623c12cc833e7aa",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"admin",
								"users",
								"686816521623c12cc833e7aa"
							]
						},
						"description": "### Get User by ID\n\nThis endpoint retrieves detailed information about a specific user based on their unique identifier (ID).\n\n#### Request\n\n- **Method**: GET\n    \n- **URL**: `/api/v1/admin/users/{userId}`\n    \n- **Path Parameter**:\n    \n    - `userId` (string): The unique identifier of the user you wish to retrieve. In this example, it is `686816521623c12cc833e7aa`.\n        \n\n#### Response\n\n- **Status Code**: 200 OK\n    \n- **Content-Type**: application/json\n    \n- { \"status\": \"\", \"data\": { \"_id\": \"\", \"name\": \"\", \"email\": \"\", \"slug\": \"\", \"role\": \"\", \"createdAt\": \"\", \"updatedAt\": \"\", \"__v\": 0 }}\n    \n    - `status` (string): Status message of the request.\n        \n    - `data` (object): Contains user details:\n        \n        - `_id` (string): The unique identifier of the user.\n            \n        - `name` (string): The name of the user.\n            \n        - `email` (string): The email address of the user.\n            \n        - `slug` (string): URL-friendly version of the user's name.\n            \n        - `role` (string): The role assigned to the user.\n            \n        - `createdAt` (string): Timestamp of when the user was created.\n            \n        - `updatedAt` (string): Timestamp of the last update to the user.\n            \n        - `__v` (integer): Version key for the user document.\n            \n\nThis endpoint is useful for administrators to fetch and display user information as needed."
					},
					"response": []
				},
				{
					"name": "Create User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authorization",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"Ahs erd\",\r\n    \"email\":\"nes@mail.com\",\r\n    \"password\":\"Asd@@456\",\r\n    \"role\":\"user\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:5000/api/v1/admin/users",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"admin",
								"users"
							]
						},
						"description": "### Add User Endpoint\n\nThis endpoint allows administrators to create a new user in the system. It accepts user details and assigns a role to the newly created user.\n\n#### Request\n\n- **Method**: POST\n    \n- **URL**: `127.0.0.1:5000/api/v1/admin/users`\n    \n- **Content-Type**: application/json\n    \n\n#### Input Parameters\n\nThe request body should be a JSON object containing the following parameters:\n\n- **name** (string): The full name of the user.\n    \n- **email** (string): The email address of the user, which must be unique.\n    \n- **password** (string): The password for the user account.\n    \n- **role** (string): The role assigned to the user (e.g., \"user\", \"admin\").\n    \n\n#### Response\n\nUpon successful creation of the user, the server will return a response indicating the result of the operation. The structure of the response typically includes:\n\n- **status** (string): Indicates the success or failure of the request.\n    \n- **message** (string): A descriptive message about the result of the operation.\n    \n- **userId** (string): The unique identifier for the newly created user.\n    \n\nEnsure that all input parameters are provided in the correct format to avoid errors during the user creation process."
					},
					"response": []
				},
				{
					"name": "Update User",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "authorization",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"Ahs$$ d\",\r\n    \"email\":\"nes@mail.com\",\r\n    \"password\":\"Asd@@654\",\r\n    \"role\":\"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:5000/api/v1/admin/users/6868513c3ca2ee52c9361fd6",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"admin",
								"users",
								"6868513c3ca2ee52c9361fd6"
							]
						},
						"description": "## Update User Information\n\nThis endpoint allows administrators to update the details of a specific user identified by their unique user ID. The request modifies the user's information such as their name, email, password, and role.\n\n### Request\n\n- **Method:** PUT\n    \n- **URL:** `127.0.0.1:5000/api/v1/admin/users/{user_id}`\n    \n    - Replace `{user_id}` with the unique identifier of the user you wish to update.\n        \n\n### Request Body\n\nThe request body must be in JSON format and include the following parameters:\n\n- **name** (string): The new name of the user.\n    \n- **email** (string): The new email address of the user.\n    \n- **password** (string): The new password for the user account.\n    \n- **role** (string): The new role assigned to the user (e.g., \"admin\", \"user\").\n    \n\n#### Example Request Body\n\n``` json\n{\n  \"name\": \"Ahs$$ d\",\n  \"email\": \"nes@mail.com\",\n  \"password\": \"Asd@@654\",\n  \"role\": \"admin\"\n}\n\n ```\n\n### Expected Response\n\nUpon a successful update, the server will return a response indicating the status of the operation. The typical response format will include:\n\n- **status** (string): Indicates whether the update was successful or if there was an error.\n    \n- **message** (string): A message providing additional details about the result of the request.\n    \n\n### Additional Notes\n\n- Ensure that the user ID provided in the URL corresponds to an existing user in the system.\n    \n- Only users with administrative privileges can access this endpoint to modify user information.\n    \n- Validate the input data to ensure compliance with any business rules (e.g., valid email format, password strength)."
					},
					"response": []
				},
				{
					"name": "Delete User",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "authorization",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:5000/api/v1/admin/users/686816521623c12cc833e7aa",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"admin",
								"users",
								"686816521623c12cc833e7aa"
							]
						},
						"description": "## Delete User Endpoint\n\nThis endpoint allows an administrator to delete a user from the system by providing the user's unique identifier.\n\n### Request\n\n- **Method**: `DELETE`\n    \n- **Endpoint**: `/api/v1/admin/users/{user_id}`\n    \n- **Path Parameter**:\n    \n    - `user_id` (string): The unique identifier of the user to be deleted. In this example, the user ID is `686816521623c12cc833e7aa`.\n        \n\n### Response\n\n- **Status Code**: `204 No Content`\n    \n\nThe expected response indicates that the user has been successfully deleted, and no content will be returned in the response body."
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "JWT",
			"value": ""
		}
	]
}